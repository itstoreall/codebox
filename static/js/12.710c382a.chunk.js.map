{"version":3,"sources":["../../../../src/react/hooks/useApolloClient.ts","../../../../src/react/parser/index.ts","../../../../src/react/hooks/useMutation.ts","../../../../src/react/hooks/useQuery.ts","../node_modules/graphql-tag/node_modules/tslib/tslib.es6.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../../src/index.ts"],"names":["useApolloClient","override","context","client","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","useMutation","mutation","options","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","graphQLErrors","onCompleted","catch","onError","reset","useQuery","query","defaultWatchQueryOptions","defaultOptions","watchQuery","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","next","unsubscribe","complete","setObsQuery","previousData","nextResult","setOptions","previousResult","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","fetchPolicy","refetch","ready","obsQueryFields","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","otherOptions","__assign","t","s","i","n","arguments","p","prototype","call","apply","this","create","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","setPrototypeOf","__proto__","_getPrototypeOf","getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","_typeof","obj","Symbol","iterator","constructor","_possibleConstructorReturn","Parent","args","Class","a","push","instance","Function","_cache","undefined","fn","indexOf","TypeError","has","set","Wrapper","value","enumerable","writable","configurable","isObjectLike","invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","body","matchAll","match","index","column","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","slice","printPrefixedLines","map","subLine","existingLines","padLen","max","prefix","join","toNormalizedArgs","firstArg","nodes","positions","path","originalError","extensions","GraphQLError","subClass","superClass","Derived","hasNativeReflectConstruct","Super","NewTarget","_this$nodes","_nodeLocations$","_ref","rawArgs","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","locations","pos","originalExtensions","defineProperties","stack","defineProperty","captureStackTrace","output","formattedError","toStringTag","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","Token","SOF","lastToken","token","lineStart","lookahead","EOF","nextToken","readNextToken","end","prev","COMMENT","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","FLOAT","INT","chunkStart","STRING","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","BLOCK_STRING","dedentBlockStringLines","isNameContinue","NAME","Parser","sourceObj","isSource","Source","_lexer","_options","expectToken","Kind","DOCUMENT","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","OperationTypeNode","QUERY","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","parseVariableDefinition","VARIABLE_DEFINITION","variable","parseVariable","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","VARIABLE","SELECTION_SET","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","FIELD","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","parseList","parseObject","advance","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","OBJECT","fields","parseObjectField","OBJECT_FIELD","parseDirective","DIRECTIVE","innerType","LIST_TYPE","NON_NULL_TYPE","NAMED_TYPE","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","parseFieldDefinition","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","startToken","_this$_options2","noLocation","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","parseDocument"],"mappings":"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","file":"static/js/12.710c382a.chunk.js","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\nimport construct from \"@babel/runtime/helpers/esm/construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [\n    position,\n  ]);\n}\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}